All About Scripts
*****************
**Scripts** are specific elements that are part of a LOST annotation 
pipeline.
A script element is implemented as a python3 module.
The :ref:`listing below <aascripts-anno-all-imgs>` shows an example of 
such a script.
This script will request image annotations for all images of a dataset.

.. literalinclude:: ../../../backend/lost/pyapi/examples/pipes/mia/anno_all_imgs.py
    :caption: Listing 1: An example LOST script.
    :name: aascripts-anno-all-imgs

In order to implement a script you need to create a python class that 
inherits from :py:class:`lost.pyapi.script.Script`.
Your class needs to implement a **main** method needs to be instantiated
within your python script.
The :ref:`listing below <aascripts-hello-world>` shows a minimum example
for a script.

.. code-block:: python
    :linenos:
    :caption: Listing 2: A minimum example for a script in LOST
    :name: aascripts-hello-world

    from lost.pyapi import script

    class MyScript(script.Script):

        def main(self):
            self.logger.info('Hello World!')

    if __name__ == "__main__":
        MyScript()

The LOST PyAPI Script Model
===========================

As all pipeline elements a script has an **input** and an **output** object.
Via these objects it is connected to other elements in a pipeline
(see also :ref:`aapipelines-pipe-def-files`).

Inside a script you can exchange information with the connected elements
by using the **self.inp** object of type
:py:class:`lost.pyapi.inout.Input` and
the **self.outp** of type :py:class:`lost.pyapi.inout.ScriptOutput`.

Reading Imagesets
-----------------
It is a common pattern to read a **path** to an imageset from a
**Datasource** element in your annotation pipeline.
See :ref:`Listing 3 <aascripts-reading-images>` for a code example.
Since multiple **Datasources** could be connected to our script,
we iterate over all connected **Datasources** of the input with
:py:meth:`self.inp.datasources <lost.pyapi.inout.Input.datasources>`.
For each **Datasource** element we can read the **path** attribute
to get the filesystem path to a folder with images.

.. code-block:: python
    :linenos:
    :caption: Listing 3: Getting the path to all images of a Datasource.
    :name: aascripts-reading-images

    from lost.pyapi import script
    import os

    class MyScript(script.Script):

        def main(self):
            for ds in self.inp.datasources:
                for img_file in os.listdir(ds.path):
                    img_path = os.path.join(ds.path, img_file)

    if __name__ == "__main__":
        MyScript()

Requesting Annotations
----------------------
The most important feature of the LOST PyAPI is the ability to request
annotations for a connected **AnnotationTask** element.
Inside a **Script** you can access the output element and call the
:py:meth:`self.outp.request_annos <lost.pyapi.inout.ScriptOutput.request_annos>`
method (see :ref:`Listing 4 <aascripts-request-annos>`).

.. code-block:: python
    :caption: Listing 4: Requesting an annotation for a image.
    :name: aascripts-request-annos

    self.outp.self.outp.request_annos(img_path)

Sometimes you also want to send annotation proposals to an
**AnnotationTask** in order to support your annotator.
In most cases these proposals will be generated by an AI,
like an object detector.
The :ref:`listing below <aascripts-request-anno-proposals>` shows a 
simple example to send a dummy box and a dummy point to an annotation 
tool.

.. code-block:: python
    :caption: Listing 5: Requesting an annotation for a image.
    :name: aascripts-request-anno-proposals

    self.outp.self.outp.request_annos(img_path,
        annos = [[0.1, 0.1, 0.2, 0.2], [0.1, 0.2]],
        anno_types = ['bbox', 'point'])

Annotation Broadcasting
-----------------------
If multiple **AnnoTask** elements are connected to your **Script** output
and you call :py:meth:`self.outp.request_annos <lost.pyapi.inout.ScriptOutput.request_annos>`,
the annotation request will be **broadcasted** to all connected **AnnoTasks**.
So each **AnnoTask** will get its own copy of your annotation request.

Contexts to store files
=======================

Script ARGUMENTS
================

Script ENVS
================

Logging
================
